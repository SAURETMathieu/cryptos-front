generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  invoices      Invoice[]
  sessions      Session[]
  subscriptions Subscription[]
  wallets       Wallet[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Wallet {
  id              Int              @id @default(autoincrement())
  address         String?
  blockchain      WalletBlockchain @default(All)
  exchange        WalletExchange?
  name            String
  type            WalletType
  userId          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastTransaction DateTime         @default(now())
  apiKey          ApiKey[]
  balances        Balance[]
  bots            Bot[]
  transactions    Transaction[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  cryptos         WalletCryptos[]

  @@unique([userId, name, address])
}

model Crypto {
  id           Int             @id @default(autoincrement())
  asset        String          @unique
  name         String          @unique
  digit        Int
  logo_url     String
  currency     String          @default("USDT")
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  balances     Balance[]
  bots         Bot[]
  trades       Trade[]
  transactions Transaction[]
  wallets      WalletCryptos[]
}

model WalletCryptos {
  walletId  Int
  cryptoId  Int
  createdAt DateTime @default(now())
  crypto    Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  wallet    Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@id([walletId, cryptoId])
}

model Trade {
  id             Int      @id @default(autoincrement())
  buy_price      Float
  sell_price     Float
  buy_quantity   Float
  sell_quantity  Float
  buy_timestamp  DateTime
  sell_timestamp DateTime
  status         String
  buy_fees       Float
  sell_fees      Float
  currency       String
  cryptoId       Int
  botId          Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  bot            Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  crypto         Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id         Int      @id @default(autoincrement())
  key        String
  name       String
  write      Boolean
  read       Boolean
  expired_at DateTime
  walletId   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  wallet     Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  bot        Bot[]

  @@unique([key, walletId])
}

model Bot {
  id               Int      @id @default(autoincrement())
  name             String
  status           String
  starting_balance Float
  ending_balance   Float
  max_trade_open   Int
  max_invest       Float
  apiKeyId         Int
  walletId         Int
  cryptoId         Int
  strategieId      Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  apiKey           ApiKey   @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  crypto           Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  strategie        Strategy @relation(fields: [strategieId], references: [id], onDelete: Cascade)
  wallet           Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
  trades           Trade[]

  @@unique([name, walletId])
  @@unique([cryptoId, walletId, strategieId])
}

model Strategy {
  id                Int      @id @default(autoincrement())
  name              String   @unique
  description       String
  variation         String   @unique
  execution_delay   Int      @default(60)
  percent_per_trade Float    @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  bots              Bot[]
}

model Plan {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  description     String
  price           Float
  currency        String
  interval        String
  intervalCount   Int
  stripeId        String
  trialPeriodDays Int
  isActive        Boolean        @default(true)
  features        String[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  subscriptions   Subscription[]
}

model Subscription {
  id               Int                @id @default(autoincrement())
  userId           String
  planId           Int
  startDate        DateTime           @default(now())
  endDate          DateTime?
  status           SubscriptionStatus
  currentPeriodEnd DateTime?
  lastPaymentDate  DateTime?
  nextPaymentDate  DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  invoices         Invoice[]
  plan             Plan               @relation(fields: [planId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, planId])
}

model Invoice {
  id              Int           @id @default(autoincrement())
  userId          String
  subscriptionId  Int
  amount          Float
  currency        String
  status          InvoiceStatus
  issuedAt        DateTime      @default(now())
  paidAt          DateTime?
  dueDate         DateTime
  stripeInvoiceId String        @unique
  description     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id          Int       @id @default(autoincrement())
  idx         String
  fromAddress String?
  toAddress   String?
  fromLabel   String?
  toLabel     String?
  fees        Float?
  value       Float?
  status      Int?
  type        String?
  timestamp   DateTime?
  price       Float?
  cryptoId    Int
  walletId    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  blockNumber Int?
  crypto      Crypto    @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  wallet      Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
}

model Balance {
  id               Int      @id @default(autoincrement())
  nbToken          Float
  price            Float?
  price24h         Float?
  timestamp        DateTime
  percent          Float?
  walletId         Int
  cryptoId         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  price1h          Float?
  realizedProfit   Float?
  unrealizedProfit Float?
  crypto           Crypto   @relation(fields: [cryptoId], references: [id], onDelete: Cascade)
  wallet           Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@unique([cryptoId, walletId, timestamp])
}

enum UserRole {
  USER
  ADMIN
}

enum WalletType {
  Centralized
  Decentralized
}

enum WalletExchange {
  Binance
  Coinbase
  Kraken
  Bitstamp
  Kucoin
}

enum WalletBlockchain {
  All
  Bitcoin
  Ethereum
  BSC
  Polygon
  Solana
  Avalanche
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  TRIAL
}

enum InvoiceStatus {
  PENDING
  PAID
  FAILED
  CANCELED
}
